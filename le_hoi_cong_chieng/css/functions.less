@import "functions/spin";

.fadeIn(){
  0% { opacity: 0; }
  100% { opacity: 1; }
}
.dofadeIn() {
  @-moz-keyframes fade-in { .fadeIn(); }
  @-webkit-keyframes fade-in { .fadeIn(); }
  @keyframes fade-in { .fadeIn(); }
}
.fadeIn(){
  0% { opacity: 1; }
  100% { opacity: 0; }
}
.dofadeOut() {
  @-moz-keyframes fade-in { .fadeIn(); }
  @-webkit-keyframes fade-in { .fadeIn(); }
  @keyframes fade-in { .fadeIn(); }
}
.dofadeOut();

.use-animation(@key, @time, @iteration-count, @timing-function){
  -webkit-animation-name: @key;
  -webkit-animation-duration: @time;
  -webkit-animation-iteration-count: @iteration-count;
  -webkit-animation-timing-function: @timing-function;

  -moz-animation-name: @key;
  -moz-animation-duration: @time;
  -moz-animation-iteration-count: @iteration-count;
  -moz-animation-timing-function: @timing-function;

  -ms-animation-name: @key;
  -ms-animation-duration: @time;
  -ms-animation-iteration-count: @iteration-count;
  -ms-animation-timing-function: @timing-function;

  -o-animation-name: @key;
  -o-animation-duration: @time;
  -o-animation-iteration-count: @iteration-count;
  -o-animation-timing-function: @timing-function;
}
//function
.generate-columns(@n, @i: 1) when (@i =< @n) {
  .grid-@{i} {
    width: (@i * 100% / @n);
  }
  .generate-columns(@n, (@i + 1));
}

.make-grid-columns() {
  // Common styles for all sizes of grid columns, widths 1-12
  .col(@index) { // initial
    @item: ~".grid-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general; "=<" isn't a typo
    @item: ~".grid-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      float: left;
      position: relative;
      // Prevent columns from collapsing when empty
      min-height: 1px;
      // Inner gutter via padding
      padding-left: ceil((@grid-gutter-width / 2));
      padding-right: floor((@grid-gutter-width / 2));
    }
  }
  .col(1); // kickstart it
}